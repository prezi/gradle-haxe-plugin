group = 'com.prezi.haxe'

if (hasProperty("release")) {
	version = [ "git", "describe", "--match", "[0-9]*", "--dirty"].execute().text.trim()
} else {
	version = [ "git", "describe", "--match", "[0-9]*", "--abbrev=0"].execute().text.trim() + "-SNAPSHOT"
}

task version << {
	println "Version: ${version}"
}

def sonatype = hasProperty("sonatype")
def signArtifacts = sonatype || hasProperty("sign")

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: "maven-publish"
apply plugin: 'idea'

sourceCompatibility = "1.6"
targetCompatibility = "1.6"

tasks.withType(AbstractCompile) {
	options.encoding = "UTF-8"
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile gradleApi()
	compile "org.webjars:requirejs:2.1.8"
	compile "commons-io:commons-io:2.4"
	compile "com.google.guava:guava:17.0"

	// Required only for the incubating stuff brought over from Gradle 2.0
	compile "commons-lang:commons-lang:2.6"

	testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
	// Override the one from Spock
	testCompile "org.codehaus.groovy:groovy-all:2.4.4"
}

javadoc {
	failOnError = false
}

task javadocJar(type: Jar) {
	dependsOn javadoc
	classifier = "javadoc"
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = "sources"
}

jar {
	from "LICENSE.txt"
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

task run(type: Exec) {
	dependsOn install
	workingDir "src/test/at"
	commandLine = ["gradle", "clean", "compile", "testJs", "uploadArchives", "--no-daemon", "-Pmunit.kill-browser", "--info", "--stacktrace"]
}

uploadArchives {
	repositories {
		repositories {
			mavenDeployer {
				pom.project {
					url "http://github.com/prezi/gradle-haxe-plugin"
					name project.name
					description project.description

					scm {
						url "http://github.com/prezi/gradle-haxe-plugin"
						connection "scm:git@github.com:prezi/gradle-haxe-plugin.git"
						developerConnection "scm:git@github.com:prezi/gradle-haxe-plugin.git"
					}

					licenses {
						license {
							name "The Apache Software License, Version 2.0"
							url "http://www.apache.org/licenses/LICENSE-2.0.txt"
							distribution "repo"
						}
					}

					developers {
						developer {
							id "lptr"
							name "Lorant Pinter"
						}
						developer {
							id "Schipy"
							name "Peter Sipos"
						}
						developer {
							id "btorok"
							name "Balazs Torok"
						}
					}
				}

				if (sonatype) {
					repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
						def user = project.getProperty("sonatypeUsername")
						def password = project.getProperty("sonatypePassword")
						authentication(userName: user, password: password)
					}
				} else if (project.hasProperty("nexusUser") && project.hasProperty("nexusPassword")) {
					def user = project.getProperty("nexusUser")
					def password = project.getProperty("nexusPassword")
					repository(url: "https://artifactory.prezi.com/plugins-release-local/") {
						authentication(userName: user, password: password)
					}
					snapshotRepository(url: "https://artifactory.prezi.com/plugins-snapshot-local/") {
						authentication(userName: user, password: password)
					}
				}
			}
		}
	}
}

publishing {
	repositories {
		maven {
			def repoUrl = project.version.endsWith('-SNAPSHOT') ?
					"https://artifactory.prezi.com/plugins-snapshot-local/" :
					"https://artifactory.prezi.com/plugins-release-local/"

			url repoUrl
			credentials {
				username = nexusUser
				password = nexusPassword
			}
		}
	}
	publications {
		maven(MavenPublication) {
			from components.java
		}
	}
}

if (signArtifacts) {
	apply plugin: "signing"

	signing {
		sign configurations.archives
	}

	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}
		}
	}
}

tasks.withType(Upload).all { dependsOn "check" }

task wrapper(type: Wrapper) {
	gradleVersion = '2.4'
}
